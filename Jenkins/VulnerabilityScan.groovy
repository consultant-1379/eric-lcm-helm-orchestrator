pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        node {
            label 'cnam'
        }
    }

    parameters {
        choice(name: 'K8_ENV', choices: 'hahn117\nbbb\nccc', description: 'Choose Env')
        string(name: 'INT_CHART_VERSION', defaultValue: '0.1.0-341')
        string(name: 'INT_CHART_NAME', defaultValue: 'eric-cn-app-mgmt-integration')
        string(name: 'INT_CHART_REPO', defaultValue: 'https://arm.sero.gic.ericsson.se/artifactory/proj-bdgs-cn-app-mgmt-drop-helm')
    }

    environment {
        bob2 = 'env | egrep -v "PATH|GERRIT_REFSPEC" > ${WORKSPACE}/env_var_bob; docker run --rm ' +
                '--env-file ${WORKSPACE}/env_var_bob -v ${WORKSPACE}/.docker/config.json:${HOME}/.docker/config.json ' +
                '-v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:${PWD} ' +
                '--workdir ${PWD} -u ${UID}:${GROUPS} -e HOME=${HOME} ' +
                'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:${BOB2_VERSION}'

        API_TOKEN = credentials("cnamfid-sero-artifactory-api-token-id")
        BASE_HELMFILE = 'helmfile.yaml'
        DOCKER_CONFIG = 'CNAMFID_Docker_ARM'
        GERRIT_ID = 'cdbc7c5b-9a86-4074-a15e-3e6558998860'
        MARKETPLACE_TOKEN = credentials("helm-executor-marketpalce-token-id")
        NAMESPACE = 'va-executor'
        REPOS_TOKEN = 'cnamfid-repository-tokens-file'
        VHUB_API_TOKEN = credentials("cnamfid-vhub-token")
        BOB2_VERSION = '1.16.0-0'

    }
    stages {
        stage("Load environment variable") {
             steps {
                   script {
                          def props = readProperties file: './Jenkins/k8s-env/' + params.K8_ENV + '.conf'
                          env.ENV_PROFILE_PRE = props.ENV_PROFILE_PRE
                          env.KUBERNETES_CONFIG_FILE_NAME = props.KUBERNETES_CONFIG_FILE_NAME
                          env.KUBERNETES_FQDN = props.KUBERNETES_FQDN
                   }
             }
        }

        stage('Preperation') {
            steps {
                withCredentials([
                        file(credentialsId: "${env.DOCKER_CONFIG}", variable: 'DOCKER_ARM_CONFIG'),
                        file(credentialsId: "${env.KUBERNETES_CONFIG_FILE_NAME}", variable: 'KUBE_CONF'),
                        file(credentialsId: "${env.REPOS_TOKEN}", variable: 'HELM_REPO_CREDENTIALS'),
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')
                ]) {
                    writeFile file: './.docker/config.json', text: readFile(DOCKER_ARM_CONFIG)
                    sh "${bob2} preperation"
                    writeFile file: './.bob/.helm-repositories.yaml', text: readFile(HELM_REPO_CREDENTIALS)
                    writeFile file: './.kube/config', text: readFile(KUBE_CONF)
                    writeFile file: './ci_config/va_tools/config', text: readFile(KUBE_CONF)
                }
            }
        }

        stage('VA scan Anchore Inlie') {
            steps {
                  catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                    sh "${bob2} anchore-scan"
                    sh "mv anchore_metadata.properties anchore-reports/; mv anchore-reports ./va_reports/"
                  }
            }
        }

        stage('Creating prerequisites: ClusterRoleBinding/CRD') {
             steps {
                   sh "${bob2} helm-RBAC-creation"
                   sh "${bob2} crd-install"
             }
        }

        stage('VA scan OWSAP Zap') {
             steps {
                    withCredentials([
                      usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                    ]) {
                         catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                           sh "${bob2} zap-test"
                         }
                   }
             }
             post {
                 failure {
                        sh "${bob2} remove-installed-release || echo 'Nothing to remove'"
                 }
             }
        }

        stage('VA scan trivy Inline') {
            steps {
                  sh "${bob2} trivy-inline-scan"
                  sh "mv trivy_metadata.properties ./va_reports/trivy/"
            }
        }

        stage('VA scan KubeHunter Tool') {
            steps {
                   catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                     sh "${bob2} kubehunter-scan"
                   }
            }
        }

        stage('VA scan KubeSec Tool') {
            steps {
                   catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                     sh "${bob2} kubesec-scan"
                   }
            }
        }

        stage('VA scan KubeAudit Tool') {
            steps {
                   catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                     sh "${bob2} kubeaudit-scan"
                   }
            }
        }

        stage('VA scan KubeBench Tool') {
            steps {
                catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                    sh "${bob2} kubebench-scan"
                }
            }
        }

        stage('Deploy Integration Latest Chart') {
             steps {
                   withCredentials([
                     usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                   ]) {
                        catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                           sh "${bob2} deploy-va-chart"
                        }
                      }
             }
        }

        stage('VA scan Defensics') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                        usernamePassword(credentialsId: 'cnam-defensics-credentials', usernameVariable: 'DEFENSICS_USERNAME', passwordVariable: 'DEFENSICS_PASSWORD'),
                ])
                        {
                            sh  "${bob2} defensics-execute-scan"
                        }
            }
        }

        stage('VA scan NMAP Tool') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                   sh "${bob2} nmap-test"
                }
            }
        }

        stage('VA scan X-RAY Tool') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                    catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                        sh "${bob2} xray-test"
                    }
                }
            }
        }

        stage('VA scan CIS-CAT Tool') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                    catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                        sh "${bob2} ciscat-scan"
                    }
                }
            }
        }

        stage('Eridoc report upload Defensics, CIS-CAT Tool') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                ]) {
                    catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                        sh "${bob2} va-eridoc-secreport-upload"
                    }
                }
            }
        }

        stage('VA Report build') {
            steps {
                  withCredentials([
                       usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                  ]) {
                  catchError(buildResult: 'UNSTABLE', catchInterruptions: false, stageResult: 'FAILURE') {
                     sh "${bob2} va-report-v2"
                  }

                }
            }
            post {
                always {
                       sh "tar -cvzf va_report.tgz va_reports/"
                       archiveArtifacts artifacts: 'va_report.tgz'
                       archiveArtifacts artifacts: 'VA_Report_*.md'
                }
            }
        }

    }

    post {
        always {
               sh "${bob2} helm-RBAC-deleting || echo 'Nothing to remove'"
               sh "${bob2} remove-installed-release || echo 'Nothing to remove'"
               cleanWs()
        }
    }
}
